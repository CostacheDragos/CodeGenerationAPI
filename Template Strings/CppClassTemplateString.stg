class(ClassName, Constructors, Properties, PublicProperties, PrivateProperties, ProtectedProperties, 
    PublicMethods, PrivateMethods, ProtectedMethods, InheritedClasses) ::= <<
class $ClassName$ $if(InheritedClasses)$:$endif$ $
                    InheritedClasses : {inheritedClass | $inheritedClass.accessSpecifier$ $inheritedClass.name$}; separator=", "$
{
// Generated Private Members
private:
    $PrivateProperties : {property | $property(property)$}; separator="\n"$$
        if(PrivateProperties)$$\n$$
        endif
    $$
    
    PrivateMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$

// Generated Protected Members
protected:
    $ProtectedProperties : {property | $property(property)$}; separator="\n"$$
        if(ProtectedProperties)$$\n$$
        endif
    $$
    
    ProtectedMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$

// Generated Public Members
public:
    $Constructors : {constructorData | $constructor(constructorData, ClassName)$}; separator="\n"$$
        if(Constructors)$$\n$$
        endif
    $$
    
    PublicProperties : {property | $\t$$property(property)$}; separator="\n"$$
        if(PublicProperties)$$\n$$
        endif
    $$
    
    PublicMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$$
        if(PublicMethods)$$\n$$
        endif
    $
    $\n$$\t$// Setters & Getters$\n$$
    Properties : {property | $
            if(property.generateSetter)$$\t$$setter(property)$$\n$$endif$
            }$$
    Properties : {property | $
            if(property.generateGetter)$$\t$$getter(property)$$\n$$endif$
            }$
}
>>

dataType(type) ::= <<
$type.name$$if(type.isPointer)$*$endif$
>>

constructor(constructorData, className) ::= <<
$className$($constructorData.initializedFields : {field | $dataType(field.type)$ $field.name$}; separator=", "$)$
    if(constructorData.initializedFields)$ : $endif$$
    constructorData.initializedFields : {field | $field.name$ { $field.name$ \}}; separator=", "$ {}
>>


property(propertyData) ::= <<
$if(propertyData.IsStatic)$static inline $endif$$dataType(propertyData.type)$ $propertyData.name$;
>>

setter(propertyData) ::= <<
$if(propertyData.IsStatic)
	$static void Set$propertyData.name; format="cap"$($dataType(propertyData.type)$ new$propertyData.name; format="cap"$){ $propertyData.name$ = new$propertyData.name; format="cap"$; \}$
else
	$void Set$propertyData.name; format="cap"$($dataType(propertyData.type)$ newValue){ this.$propertyData.name$ = newValue; \}$
endif$
>>

getter(propertyData) ::= <<
$if(propertyData.IsStatic)
$static $dataType(propertyData.type)$ Get$propertyData.name; format="cap"$(){ return $propertyData.name$; \}$
else
$$dataType(propertyData.type)$ Get$propertyData.name; format="cap"$(){ return this.$propertyData.name$; \}$
endif$
>>


method(methodData) ::= <<
$if(methodData.IsVirtual)$virtual $endif$$
 if(methodData.IsStatic)$static $endif$$dataType(methodData.returnType)$ $methodData.name$($
        methodData.parameters : {parameter | $parameter(parameter)$}; separator=", "$);
>>

parameter(parameterData) ::= <<
$if(parameterData.type.IsConst)$const $endif$$dataType(parameterData.type)$$if(parameterData.IsRef)$&$endif$ $parameterData.name$
>>




namespace(FullPackagePath, ClassCode) ::= <<
namespace $FullPackagePath$
{
    $ClassCode$
}
>>