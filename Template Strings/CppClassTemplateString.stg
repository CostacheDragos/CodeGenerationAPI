class(ClassName, Properties, PublicProperties, PrivateProperties, ProtectedProperties, 
    PublicMethods, PrivateMethods, ProtectedMethods, InheritedClasses) ::= <<
class $ClassName$ $if(InheritedClasses)$:$endif$ $
                    InheritedClasses : {inheritedClass | $inheritedClass.accessSpecifier$ $inheritedClass.name$}; separator=", "$
{
// Generated Private Members
private:
    $PrivateProperties : {property | $property.type$ $property.name$;}; separator="\n"$$
        if(PrivateProperties)$$\n$$
        endif
    $$
    
    PrivateMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$

// Generated Protected Members
protected:
    $ProtectedProperties : {property | $property.type$ $property.name$;}; separator="\n"$$
        if(ProtectedProperties)$$\n$$
        endif
    $$
    
    ProtectedMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$

// Generated Public Members
public:
    $PublicProperties : {property | $property.type$ $property.name$;}; separator="\n"$$
        if(PublicProperties)$$\n$$
        endif
    $$
    
    PublicMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$$
        if(PublicMethods)$$\n$$
        endif
    $
    $\n$$\t$// Setters & Getters$\n$$
    Properties : {property | $
            if(property.generateSetter)$$\t$void Set$property.name; format="cap"$($property.type$ newValue){ this.$property.name$ = newValue; \}$\n$$endif$
            }$$
    Properties : {property | $
            if(property.generateGetter)$$\t$$property.type$ Get$property.name; format="cap"$(){ return this.$property.name$; \}$\n$$endif$
            }$
}
>>

method(methodData) ::= <<
$if(methodData.IsVirtual)$virtual $endif$$methodData.returnType$ $methodData.name$($
        methodData.parameters : {parameter | $parameter.type$ $parameter.name$}; separator=", "$);
>>

namespace(FullPackagePath, ClassCode) ::= <<
namespace $FullPackagePath$
{
    $ClassCode$
}
>>