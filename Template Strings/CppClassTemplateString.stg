class(ClassName, Constructors, CopyAssignOperator, DestructorContents, Properties, PublicProperties, PrivateProperties, ProtectedProperties, 
    PublicMethods, PrivateMethods, ProtectedMethods, InheritedClasses, FriendClasses, TemplateTypesData) ::= <<
$if(TemplateTypesData)$template <$TemplateTypesData : {typename | class $typename.name$}; separator=", "$>
$endif$class $ClassName$ $if(InheritedClasses)$:$endif$ $
                    InheritedClasses : {inheritedClass | $inheritedClass.accessSpecifier$ $inheritedClass.name$}; separator=", "$
{
// Generated Private Members
private:
    $PrivateProperties : {property | $property(property)$}; separator="\n"$$
        if(PrivateProperties)$$\n$$
        endif
    $$
    
    PrivateMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$

// Generated Protected Members
protected:
    $ProtectedProperties : {property | $property(property)$}; separator="\n"$$
        if(ProtectedProperties)$$\n$$
        endif
    $$
    
    ProtectedMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$

// Generated Public Members
public:
    $Constructors : {constructorData | $constructor(constructorData, ClassName)$}; separator="\n"$$
        if(Constructors)$$\n$$
        endif
    $$
    
    if(CopyAssignOperator)
    $$CopyAssignOperator$$\n$
    $endif$$

    if(DestructorContents)
    $$\t$~$ClassName$()
    {
        $DestructorContents$
    }
    $endif$$
    
    
    PublicProperties : {property | $\t$$property(property)$}; separator="\n"$$
        if(PublicProperties)$$\n$$
        endif
    $$
    
    PublicMethods : {methodData | $\t$$method(methodData)$}; separator="\n"$$
        if(PublicMethods)$$\n$$
        endif
    $
    $\n$$\t$// Setters & Getters$\n$$
    Properties : {property | $
            if(property.generateSetter)$$\t$$setter(property)$$\n$$endif$
            }$$
    Properties : {property | $
            if(property.generateGetter)$$\t$$getter(property)$$\n$$endif$
            }$$


    FriendClasses: {friendClass | $\t$friend class $friendClass.Name$;}; separator="\n"$
}
>>

dataType(type) ::= <<
$if(type.IsConst)$const $endif$$type.name$$expandPointerList(type.PointerList)$$if(type.IsRef)$&$endif$
>>
expandPointerList(pointerList) ::= <<
$pointerList : {pointer | $if(pointer.isConst)$*const$else$*$endif$}$
>>
expandStaticArrayData(arrayDimensions) ::= <<
$arrayDimensions : {dimension | [$dimension.MaxLength$]}$
>>
expandVariableDefinition(var) ::= <<
$dataType(var.Type)$ $var.Name$$expandStaticArrayData(var.Type.ArrayDimensions)$
>>


constructor(constructorData, className) ::= <<
$className$($if(constructorData.IsCopyConstructor)$const $className$& other$
    else$$constructorData.initializedFields : {field | $expandVariableDefinition(field)$}; separator=", "$$
    endif$)$
    if(constructorData.initializedFields)$ : $endif$$
    constructorData.initializedFields : {field | $field.name$ { $if(constructorData.IsCopyConstructor)$other.$endif$$field.name$ \}}; separator=", "$ $
if(constructorData.bodyCode)$
{
    $constructorData.bodyCode$
}$else
${}$endif$
>>


property(propertyData) ::= <<
$if(propertyData.IsStatic)$static inline $endif$$expandVariableDefinition(propertyData)$;
>>

setter(propertyData) ::= <<
$if(propertyData.IsStatic)$static $endif$void Set$propertyData.name; format="cap"$($
    dataType(propertyData.type)$ new$propertyData.name; format="cap"$$
        propertyData.type.ArrayDimensions: {dimension | [$dimension.MaxLength$]}
    $$
        if(propertyData.SetterModel.AdditionalParameters)$, $endif$$
        propertyData.SetterModel.AdditionalParameters: {parameter | $dataType(parameter.type)$ new$parameter.name; format="cap"$}; separator=", "$)
    { 
        $propertyData.name$ = new$propertyData.name; format="cap"$;$if(propertyData.SetterModel.AdditionalParameters)$$\n$$endif$$
        propertyData.SetterModel.AdditionalParameters: {parameter | $\t$$\t$$parameter.name$ = new$parameter.name; format="cap"$;}; separator="\n"$ 
    \}
>>

getter(propertyData) ::= <<
$if(propertyData.IsStatic)
$static $dataType(propertyData.type)$$
    propertyData.type.ArrayDimensions: {dimension | *}
$ Get$propertyData.name; format="cap"$(){ return $propertyData.name$; \}$
else
$$dataType(propertyData.type)$$
    propertyData.type.ArrayDimensions: {dimension | *}
$ Get$propertyData.name; format="cap"$(){ return this.$propertyData.name$; \}$
endif$
>>


method(methodData) ::= <<
$if(methodData.IsVirtual)$virtual $endif$$
 if(methodData.IsStatic)$static $endif$$dataType(methodData.returnType)$ $methodData.name$($
        methodData.parameters : {parameter | $expandVariableDefinition(parameter)$}; separator=", "$);
>>

copyAssignOperator(ClassName, Properties, DynamicAllocationBodyCode) ::= <<
    $ClassName$& operator=(const $ClassName$& other)
    {
        $Properties : {property | $property.Name$ = other.$property.Name$;}; separator="\n"$
        $DynamicAllocationBodyCode$
    }
>>


namespace(FullPackagePath, ClassCode) ::= <<
namespace $FullPackagePath$
{
    $ClassCode$
}
>>